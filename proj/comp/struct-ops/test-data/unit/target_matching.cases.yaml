# Unit tests for target matching flexibility

- name: class_variations
  file: service.ts
  content: |2
    @Injectable()
    export class UserService extends BaseService {
      constructor(private db: Database) {
        super();
      }
    }
  variations_valid:
    - "UserService"
    - "export class UserService"
    - "class UserService"
    - "UserService {"
    - "export class UserService {"
    - "export class UserService extends"
  variations_invalid:
    - "@Injectable()"  # Decorator alone
    - "Service"  # Partial name
    - "BaseService"  # Parent class

- name: function_variations
  file: utils.ts
  content: |2
    export async function processData(input: string): Promise<Result> {
      return await transform(input);
    }
  variations_valid:
    - "processData"
    - "function processData"
    - "async function processData"
    - "export async function processData"
    - "processData(input:"
    - "function processData(input: string)"
  variations_invalid:
    - "process"  # Partial
    - "transform"  # Different function

- name: method_variations
  file: class.ts
  content: |2
    class Calculator {
      public calculate(x: number): number {
        return x * 2;
      }
    }
  variations_valid:
    - |
      Calculator
      calculate
    - |
      Calculator
      public calculate
    - |
      Calculator
      calculate(x: number)
    - "calculate"  # Matches but ambiguous if multiple
  variations_invalid: []

- name: python_def_variations
  file: module.py
  content: |2
    @cache
    def expensive_operation(n: int) -> int:
        return sum(i * i for i in range(n))
  variations_valid:
    - "expensive_operation"
    - "def expensive_operation"
    - "expensive_operation(n:"
    - "def expensive_operation(n: int) -> int:"
  variations_invalid:
    - "@cache"  # Decorator alone

- name: nested_target_specificity
  file: nested.ts
  content: |2
    export class OuterClass {
      innerMethod() {
        if (condition) {
          return true;
        }
      }
    }
  variations_valid:
    - |
      OuterClass
      innerMethod
      if (condition)
    - |
      innerMethod
      if (condition)
  variations_invalid:
    - |
      OuterClass
      if (condition)  # Skipped intermediate